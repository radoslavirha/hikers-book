kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: mongodb-storageclass
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: mongodb-pv
spec:
  capacity:
    storage: 2Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: mongodb-storageclass
  local:
    path: /Users/radoslavirha/dev/tmp/mongodb
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: size
              operator: In
              values:
                - large
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mongodb-pvc
spec:
  storageClassName: mongodb-storageclass
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1Gi
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: mongodb-configmap
data:
  mongo.conf: |
    storage:
      dbPath: /data/db
  ensure-users.js: |
    const targetDbStr = 'hikers-book';
    const rootUser = cat('/etc/k8/admin/MONGO_ROOT_USERNAME');
    const rootPass = cat('/etc/k8/admin/MONGO_ROOT_PASSWORD');
    const usersStr = cat('/etc/k8/MONGO_USERS_LIST');

    const adminDb = db.getSiblingDB('admin');
    adminDb.auth(rootUser, rootPass);
    print('Successfully authenticated admin user');

    const targetDb = db.getSiblingDB(targetDbStr);

    const customRoles = adminDb
      .getRoles({rolesInfo: 1, showBuiltinRoles: false})
      .map(role => role.role)
      .filter(Boolean);

    usersStr
      .trim()
      .split(';')
      .map(s => s.split(':'))
      .forEach(user => {
        const username = user[0];
        const rolesStr = user[1];
        const password = user[2];

        if (!rolesStr || !password) {
          return;
        }

        const roles = rolesStr.split(',');
        const userDoc = {
          user: username,
          pwd: password,
        };

        userDoc.roles = roles.map(role => {
          if (!~customRoles.indexOf(role)) {
            return role;
          }
          return {role: role, db: 'admin'}; 
        });

        try {
          targetDb.createUser(userDoc);
        } catch (err) {
          if (!~err.message.toLowerCase().indexOf('duplicate')) {
            throw err;
          }
        }
      });
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: mongodb
spec:
  serviceName: database
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
        selector: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo
          # env:
          #   - name: MONGO_INITDB_ROOT_USERNAME_FILE
          #     value: /etc/k8/admin/MONGO_ROOT_USERNAME
          #   - name: MONGO_INITDB_ROOT_PASSWORD_FILE
          #     value: /etc/k8/admin/MONGO_ROOT_PASSWORD
          volumeMounts:
            # - name: k8
            #   mountPath: /etc/k8
            #   readOnly: true
            # - name: mongodb-scripts
            #   mountPath: /docker-entrypoint-initdb.d
            #   readOnly: true
            - name: mongodb-configmap
              mountPath: /config
              readOnly: true
            - name: mongodb-data
              mountPath: /data/db
      nodeSelector:
        size: large
      volumes:
        - name: k8
          secret:
            secretName: mongodb-secret
            items:
              - key: MONGO_ROOT_USERNAME
                path: admin/MONGO_ROOT_USERNAME
                mode: 0444
              - key: MONGO_ROOT_PASSWORD
                path: admin/MONGO_ROOT_PASSWORD
                mode: 0444
              - key: MONGO_USERNAME
                path: MONGO_USERNAME
                mode: 0444
              - key: MONGO_PASSWORD
                path: MONGO_PASSWORD
                mode: 0444
              - key: MONGO_USERS_LIST
                path: MONGO_USERS_LIST
                mode: 0444
        - name: mongodb-scripts
          configMap:
            name: mongodb-configmap
            items:
              - key: ensure-users.js
                path: ensure-users.js
        - name: mongodb-configmap
          configMap:
            name: mongodb-configmap
            items:
              - key: mongo.conf
                path: mongo.conf
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-pvc
---
kind: Secret
apiVersion: v1
metadata:
  name: mongodb-secret
type: Opaque
data:
  MONGO_ROOT_USERNAME: YWRtaW4K # admin
  MONGO_ROOT_PASSWORD: cGFzc3dvcmQK # password
  MONGO_USERNAME: aGlrZXIK # hiker
  MONGO_PASSWORD: cGFzc3dvcmQK # password
  MONGO_USERS_LIST: aGlrZXI6ZGJBZG1pbixyZWFkV3JpdGU6cGFzc3dvcmQK # hiker:dbAdmin,readWrite:password
---
apiVersion: v1
kind: Service
metadata:
  name: database
  labels:
    app: database
spec:
  clusterIP: None
  selector:
    app: database
